<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;

/**
 * This is the base-model class for table "assets".
 *
 * @property string $page
 * @property string $positiion
 * @property string $uri
 * @property integer $id
 * @property string $aliasModel
 */
abstract class Assets extends \yii\db\ActiveRecord
{
    /**
     * BaseModel rules. 
     **/
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'assets';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            // [
            //     'class' => \app\components\behaviors\UUIDBehavior::class,
            //     'model' => get_called_class(),
            //     'primaryKey' => 'id',
            // ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['page', 'positiion', 'uri'], 'required'],
            [['page', 'positiion'], 'string', 'max' => 100],
            [['uri'], 'string', 'max' => 255],
            [['id'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'page' => Yii::t('models', 'Page'),
            'positiion' => Yii::t('models', 'Positiion'),
            'uri' => Yii::t('models', 'Uri'),
        ];
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'page',
            'positiion',
            'uri',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if(isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function($model) {
                return $model->id;
            };
        endif;
        if(isset($parent['page'])) :
            unset($parent['page']);
            $parent['page'] = function($model) {
                return $model->page;
            };
        endif;
        if(isset($parent['positiion'])) :
            unset($parent['positiion']);
            $parent['positiion'] = function($model) {
                return $model->positiion;
            };
        endif;
        if(isset($parent['uri'])) :
            unset($parent['uri']);
            $parent['uri'] = function($model) {
                return $model->uri;
            };
        endif;



        return $parent;
    }


    public static function faker($count = 10){
        $faker= \Faker\Factory::create();
        $faker->addProvider(new \app\components\faker\provider\MyImage($faker));
        $data = [];
        $maxId = static::find()->max('id');

        // relational data
        for ($i = 0; $i < $count; $i++) {
            $data[] = [ 
                "page" => $faker->text(),
                "positiion" => $faker->text(),
                "uri" => $faker->text(),
                "id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
            ];
        }
        return $data;
    }

}
